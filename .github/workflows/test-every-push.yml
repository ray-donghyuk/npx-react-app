# deploy.yml

# push 이벤트가 발생했을 때, deploy로 시작하는 이름을 가진 브랜치만 실행된다는 말입니다!
# 아래처럼 사용할 수도 있고, 특정 브랜치를 ignore할 수도 있어요!
# 다른 방법을 보고싶으시다면 코드 아래 참고-1에 링크를 걸어놓을게요!
on:
  push:
    branches:
      - 'deploy/*/*/*'

jobs:
  deploy:
    name: 'Build & Deploy'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ secrets.NODE_VERSION }}

      - name: Cache node modules
        uses: actions/cache@v2
        id: cache
        with:
          path: node_modules
          key: npm-packages-${{ hashFiles('**/package-lock.json') }}

      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm install

      - name: Extract region and env from branch
        run: |
          # 환경변수로 브랜치 이름을 가져올 수 있습니다.
          # push된 브랜치 이름이 `deploy/kor/qa/popup`이라면
          # BRANCH라는 변수는 `deploy/kor/qa/popup`이 될 거예요.
          BRANCH=${GITHUB_REF#refs/heads/}
          # 브랜치 이름을 '/'로 쪼개서 SPLITTED_BRANCH라는 변수에 담아볼게요.
          SPLITTED_BRANCH=($(echo $BRANCH | tr "/" "\n"))

          # SPLITTED_BRANCH[1]은 kor이 되겠죠? 이걸 region이라는 값을 통해서 output으로 내보낼게요!
          echo "::set-output name=region::$(echo ${SPLITTED_BRANCH[1]})"
          # SPLITTED_BRANCH[2]는 qa가 되겠죠? 이걸 env라는 값을 통해서 output으로 내보낼게요!
          echo "::set-output name=env::$(echo ${SPLITTED_BRANCH[2]})"
        # 이제 extract라는 값으로 위에서 output으로 내보낸 값들을 뒤의 step에서 사용할 수 있겠죠?
        id: extract

      - name: Get AWS infos
        # 카카오웹툰은 AWS를 통해 배포를 하고 있습니다.
        # 배포를 하기 위해 AWS 관련된 값들이 필요한데요,
        # 아래 secrets 값들은 위에서 세팅해봤던 Settings > Secrets에 있다고 보시면 됩니다.
        # 민감한 정보니깐요!
        run: |
          # 위 스텝에서 세팅한 extract값을 여기서 사용합니다!
          if [ "${{ steps.extract.outputs.region }}" = "kor" ]; then
            ACCESS_KEY_ID="aaa"
            SECRET_ACCESS_KEY_ID="bbb"
            S3_PATH="ccc"
            AWS_REGION=ap-northeast-2
          elif [ "${{ steps.extract.outputs.region }}" = "twn" ]; then
            ACCESS_KEY_ID=${{ secrets.AWS_TWN_ACCESS_KEY_ID }}
            SECRET_ACCESS_KEY_ID=${{ secrets.AWS_TWN_SECRET_ACCESS_KEY }}
            S3_PATH=${{ secrets.AWS_TWN_S3_PATH }}
            AWS_REGION=ap-northeast-1
          else
            ACCESS_KEY_ID=${{ secrets.AWS_THA_ACCESS_KEY_ID }}
            SECRET_ACCESS_KEY_ID=${{ secrets.AWS_THA_SECRET_ACCESS_KEY }}
            S3_PATH=${{ secrets.AWS_THA_S3_PATH }}
            AWS_REGION=ap-northeast-1
          fi

          echo "::set-output name=accessKeyId::$(echo ${ACCESS_KEY_ID})"
          echo "::set-output name=secretAccessKeyId::$(echo ${SECRET_ACCESS_KEY_ID})"
          echo "::set-output name=s3Path::$(echo ${S3_PATH})"
          echo "::set-output name=awsRegion::$(echo ${AWS_REGION})"
        # 다음 step들에서 aws-infos라는 값으로 위의 AWS 정보를 가져올 수 있겠죠?
        id: aws-infos

      # 카카오웹툰은 build하는 action을 따로 만들어두었습니다.
      # 여기서 소개하지는 않을게요!
      # - name: Build
      #   uses: ./.github/actions/build
      #   with:
      #     # with 키워드로 넘겨받은 env, region 값으로 판단하여 그에 맞는 빌드를 하겠죠?
      #     env: ${{ steps.extract.outputs.env }}
      #     region: ${{ steps.extract.outputs.region }}

      # 카카오웹툰은 deploy하는 action도 따로 만들어두었습니다.
      # 마찬가지로 여기서 소개하지는 않을게요!
      - name: Echo
        run: |
          # env, region, accessKeyId, secretAccessKeyId, s3Path, awsRegion 값으로
          # 배포할 곳을 판단하여 그에 맞는 곳에 배포를 하겠죠?
          echo ${{ steps.extract.outputs.env }}
          echo ${{ steps.extract.outputs.region }}
          echo ${{ steps.aws-infos.outputs.accessKeyId }}
          echo ${{ steps.aws-infos.outputs.secretAccessKeyId }}
          echo ${{ steps.aws-infos.outputs.s3Path }}
          echo ${{ steps.aws-infos.outputs.awsRegion }}

      # - name: Send slack if failed
      #   if: ${{ failure() }}
      #   uses: ./.github/actions/slack-notify
      #   with:
      #     # region, env 값을 이용해서 어느 region, env에서 에러가 났는 지
      #     # 슬랙으로 알림을 보낼 수 있겠네요.
      #     # slack-notify action에서 파일에 대한 수정이 조금 필요하겠죠?
      #     region: ${{ steps.extract.outputs.region }}
      #     env: ${{ steps.get.outputs.env }}
      #     slack_incoming_url: ${{ secrets.SLACK_INCOMING_URL }}

      # - name: Send slack if completed
      #   if: ${{ success() }}
      #   uses: ./.github/actions/slack-notify
      #   with:
      #     region: ${{ steps.extract.outputs.region }}
      #     env: ${{ steps.get.outputs.env }}
      #     status: success
      #     slack_incoming_url: ${{ secrets.SLACK_INCOMING_URL }}